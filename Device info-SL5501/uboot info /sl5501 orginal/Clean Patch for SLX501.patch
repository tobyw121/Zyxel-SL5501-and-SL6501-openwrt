From Tobyw121 
From: Tobyw121 <Tobiasw763@gmail.com>
Subject: MIPS: add board support for ZyXEL SLX501

Signed-off-by: Tobyw121 <Tobiasw763@gmail.com>
Signed-off-by: Daniel Schwierzeck <daniel.schwierzeck@gmail.com>


--- /dev/null
+++ b/board/zyxel/slx501/Makefile
+#
+# Copyright (C) 2000-2011 Wolfgang Denk, DENX Software Engineering, wd@denx.de
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).o
+
+COBJS	= $(BOARD).o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
--- /dev/null
+++ b/board/zyxel/slx501/config.mk
+#
+# Copyright (C) 2011-2013 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+PLATFORM_CPPFLAGS += -I$(TOPDIR)/board/$(BOARDDIR)
--- /dev/null
+++ b/board/zyxel/slx501/ddr_settings.h
+/*
+ * Copyright (C) 2007-2010 Lantiq Deutschland GmbH
+ * Copyright (C) 2011-2013 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#define	MC_CCR00_VALUE	0x101
+#define	MC_CCR01_VALUE	0x1000101
+#define	MC_CCR02_VALUE	0x1010000
+#define	MC_CCR03_VALUE	0x101
+#define	MC_CCR04_VALUE	0x1000000
+#define	MC_CCR05_VALUE	0x1000101
+#define	MC_CCR06_VALUE	0x1000100
+#define	MC_CCR07_VALUE	0x1010000
+#define	MC_CCR08_VALUE	0x1000101
+#define	MC_CCR09_VALUE	0x0
+#define	MC_CCR10_VALUE	0x2000100
+#define	MC_CCR11_VALUE	0x2000301
+#define	MC_CCR12_VALUE	0x30000
+#define	MC_CCR13_VALUE	0x202
+#define	MC_CCR14_VALUE	0x7080A0F
+#define	MC_CCR15_VALUE	0x2040F
+#define	MC_CCR16_VALUE	0x40000
+#define	MC_CCR17_VALUE	0x70102
+#define	MC_CCR18_VALUE	0x4020002
+#define	MC_CCR19_VALUE	0x30302
+#define	MC_CCR20_VALUE	0x8000700
+#define	MC_CCR21_VALUE	0x40F020A
+#define	MC_CCR22_VALUE	0x0
+#define	MC_CCR23_VALUE	0xC020000
+#define	MC_CCR24_VALUE	0x4401B04
+#define	MC_CCR25_VALUE	0x0
+#define	MC_CCR26_VALUE	0x0
+#define	MC_CCR27_VALUE	0x6420000
+#define	MC_CCR28_VALUE	0x0
+#define	MC_CCR29_VALUE	0x0
+#define	MC_CCR30_VALUE	0x798
+#define	MC_CCR31_VALUE	0x0
+#define	MC_CCR32_VALUE	0x0
+#define	MC_CCR33_VALUE	0x650000
+#define	MC_CCR34_VALUE	0x200C8
+#define	MC_CCR35_VALUE	0x1D445D
+#define	MC_CCR36_VALUE	0xC8
+#define	MC_CCR37_VALUE	0xC351
+#define	MC_CCR38_VALUE	0x0
+#define	MC_CCR39_VALUE	0x141F20
+#define	MC_CCR40_VALUE	0x141F20
+#define	MC_CCR41_VALUE	0x141F20
+#define	MC_CCR42_VALUE	0x141F20
+#define	MC_CCR43_VALUE	0x566501
+#define	MC_CCR44_VALUE	0x566501
+#define	MC_CCR45_VALUE	0x566501
+#define	MC_CCR46_VALUE	0x566501
+#define	MC_CCR47_VALUE	0x0
+#define	MC_CCR48_VALUE	0x0
+#define	MC_CCR49_VALUE	0x0
+#define	MC_CCR50_VALUE	0x0
+#define	MC_CCR51_VALUE	0x0
+#define	MC_CCR52_VALUE	0x133
+#define	MC_CCR53_VALUE	0xF3004B27
+#define	MC_CCR54_VALUE	0xF3004B27
+#define	MC_CCR55_VALUE	0xF3004B27
+#define	MC_CCR56_VALUE	0xF3004B27
+#define	MC_CCR57_VALUE	0x7800301
+#define	MC_CCR58_VALUE	0x7800301
+#define	MC_CCR59_VALUE	0x7800301
+#define	MC_CCR60_VALUE	0x7800301
+#define	MC_CCR61_VALUE	0x4
--- /dev/null
+++ b/board/zyxel/slx501/slx501.c
+/*
+ * Copyright (C) 2011-2013 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <spi.h>
+#include <asm/gpio.h>
+#include <asm/lantiq/eth.h>
+#include <asm/lantiq/chipid.h>
+#include <asm/lantiq/cpu.h>
+#include <asm/lantiq/mem.h>
+#include <asm/arch/gphy.h>
+
+#if defined(CONFIG_SPL_BUILD)
+#define do_gpio_init	1
+#define do_pll_init	1
+#define do_dcdc_init	0
+#elif defined(CONFIG_SYS_BOOT_RAM)
+#define do_gpio_init	1
+#define do_pll_init	0
+#define do_dcdc_init	1
+#else
+#define do_gpio_init	0
+#define do_pll_init	0
+#define do_dcdc_init	1
+#endif
+
+static inline void gpio_init(void)
+{
+	/* GPIO button WLAN enable (low-active) */
+	gpio_direction_input(45);
+	/* GPIO button WPS enable (low-active) */
+	gpio_direction_input(46);
+	/* GPIO button board reset (low-active) */
+	gpio_direction_input(47);
+
+	/* LED Power green */
+	gpio_direction_output(3, 1);
+	/* LED FXO green */
+	gpio_direction_output(14, 0);
+	/* LED Power red */
+	gpio_direction_output(19, 0);
+	/* LED Info green */
+	gpio_direction_output(20, 1);
+	/* LED Info red */
+	gpio_direction_output(21, 1);
+	/* LED Internet green */
+	gpio_direction_output(27, 1);
+	/* LED Internet red */
+	gpio_direction_output(28, 1);
+	/* LED WLAN green */
+	gpio_direction_output(29, 1);
+	/* LED WPS green */
+	gpio_direction_output(30, 1);
+	/* LED USB2 green */
+	gpio_direction_output(32, 1);
+
+	/* SPI CS 0.4 to serial flash */
+	gpio_direction_output(10, 1);
+
+	/* SPI CS 1.0 to ISAC-SX */
+	gpio_direction_output(39, 1);
+	/* SPI CS 1.1 to IPAC-X FXO */
+	gpio_direction_output(22, 1);
+
+	/* USB port0 power enable, disabled at startup */
+	gpio_direction_output(41, 0);
+	/* USB port1 power enable, disabled at startup */
+	gpio_direction_output(33, 0);
+
+	/* EBU.FL_CS1 as output for NAND CE */
+	gpio_set_altfunc(23, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* EBU.FL_A23 as output for NAND CLE */
+	gpio_set_altfunc(24, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* EBU.FL_A24 as output for NAND ALE */
+	gpio_set_altfunc(13, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* GPIO 3.0 as input for NAND Ready Busy */
+	gpio_set_altfunc(48, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_IN);
+	/* GPIO 3.1 as output for NAND Read */
+	gpio_set_altfunc(49, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+
+	/* LEDC/LED_ST for LED shift register */
+	gpio_set_altfunc(4, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* LEDC/LED_D for LED shift register */
+	gpio_set_altfunc(5, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* LEDC/LED_SH for LED shift register */
+	gpio_set_altfunc(6, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+
+	/* Ralink iNIC WLAN reset, low-active, asserted at startup */
+	gpio_direction_output(15, 0);
+	/* Ralink iNIC WLAN power, disabled at startup */
+	gpio_direction_output(37, 0);
+
+	/* TDM/FSC as input, internal pull-up */
+	gpio_direction_input(0);
+	gpio_set_pull(0, GPIO_PULL_UP);
+	/* TDM/DCL as input, internal pull-up */
+	gpio_direction_input(40);
+	gpio_set_pull(40, GPIO_PULL_UP);
+	/* TDM/DI as input */
+	gpio_direction_input(26);
+	/* TDM/DO as input */
+	gpio_direction_input(25);
+}
+
+int board_early_init_f(void)
+{
+	if (do_gpio_init) {
+		ltq_gpio_init();
+		gpio_init();
+	}
+
+	if (do_pll_init)
+		ltq_pll_init();
+
+	if (do_dcdc_init)
+		ltq_dcdc_init(0x7F);
+
+	return 0;
+}
+
+int checkboard(void)
+{
+	puts("Board: " CONFIG_BOARD_NAME "\n");
+	ltq_chip_print_info();
+
+	return 0;
+}
+
+int misc_init_r(void)
+{
+	return mc_tune_store_flash();
+}
+
+static const struct ltq_eth_port_config eth_port_sl4501[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: unused */
+	{ 1, 0x1, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC2: internal GPHY0 with 10/100/1000 firmware for LAN port 1 */
+	{ 2, 0x11, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC3: unused */
+	{ 3, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 2 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_sl4501 = {
+	.ports = eth_port_sl4501,
+	.num_ports = ARRAY_SIZE(eth_port_sl4501),
+};
+
+static const struct ltq_eth_port_config eth_port_sl5501[] = {
+	/* GMAC0: external Lantiq PEF7071 10/100/1000 PHY for WANoE port */
+	{ 0, 0x0, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_RGMII, 0, 0, 1 },
+	/* GMAC1: external Lantiq PEF7071 10/100/1000 PHY for LAN port 3/4 */
+	{ 1, 0x1, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_RGMII },
+	/* GMAC2: internal GPHY1 with 10/100 firmware for LAN port 1/2 */
+	{ 2, 0x11, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC3: internal GPHY0 with 10/100 firmware for LAN port 1/2 */
+	{ 3, 0x12, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 3/4 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_sl5501 = {
+	.ports = eth_port_sl5501,
+	.num_ports = ARRAY_SIZE(eth_port_sl5501),
+};
+
+static const struct ltq_eth_port_config eth_port_sl6501[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: external Lantiq PEF7071 10/100/1000 PHY for LAN port 3/4 */
+	{ 1, 0x1, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_RGMII },
+	/* GMAC2: internal GPHY1 with 10/100 firmware for LAN port 1/2 */
+	{ 2, 0x11, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC3: internal GPHY0 with 10/100 firmware for LAN port 1/2 */
+	{ 3, 0x12, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 3/4 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_sl6501 = {
+	.ports = eth_port_sl6501,
+	.num_ports = ARRAY_SIZE(eth_port_sl6501),
+};
+
+static const struct ltq_eth_port_config eth_port_compat[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: unused */
+	{ 1, 0x1, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC2: unused */
+	{ 2, 0x11, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC3: unused */
+	{ 3, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 2 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_compat = {
+	.ports = eth_port_compat,
+	.num_ports = ARRAY_SIZE(eth_port_compat),
+};
+
+int board_eth_init(bd_t * bis)
+{
+	const enum ltq_gphy_clk clk = LTQ_GPHY_CLK_25MHZ_PLL0;
+	const ulong fw_ge_addr = 0x80FE0000;
+	const ulong fw_fe_addr = 0x80FF0000;
+	unsigned int base_platform = 0;
+
+	ltq_gphy_phy11g_a2x_load(fw_ge_addr);
+	ltq_gphy_phy22f_a2x_load(fw_fe_addr);
+
+	ltq_cgu_gphy_clk_src(clk);
+
+	switch (base_platform) {
+	case 425:
+		ltq_rcu_gphy_boot(0, fw_ge_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl4501);
+	case 420:
+		ltq_rcu_gphy_boot(0, fw_fe_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl5501);
+	case 424:
+		ltq_rcu_gphy_boot(0, fw_fe_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl6501);
+	default:
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_compat);
+	}
+}
+
+int spi_cs_is_valid(unsigned int bus, unsigned int cs)
+{
+	if (bus)
+		return 0;
+
+	if (cs == 4)
+		return 1;
+
+	return 0;
+}
+
+void spi_cs_activate(struct spi_slave *slave)
+{
+	int gpio = -1;
+
+	/* Serial flash at bus 0 (SPI) */
+	if (slave->bus == 0 && slave->cs == 4)
+		gpio = 10;
+
+	if (gpio >= 0)
+		gpio_set_value(gpio, 0);
+}
+
+void spi_cs_deactivate(struct spi_slave *slave)
+{
+	int gpio = -1;
+
+	/* Serial flash at bus 0 (SPI) */
+	if (slave->bus == 0 && slave->cs == 4)
+		gpio = 10;
+
+	if (gpio >= 0)
+		gpio_set_value(gpio, 1);
+	}
+}
--- a/boards.cfg
+++ b/boards.cfg
 Active  mips        mips32         incai
 Active  mips        mips32         incaip      -               incaip              incaip_100MHz                        incaip:CPU_CLOCK_RATE=100000000                                                                                                   Wolfgang Denk <wd@denx.de>
 Active  mips        mips32         incaip      -               incaip              incaip_133MHz                        incaip:CPU_CLOCK_RATE=133000000                                                                                                   Wolfgang Denk <wd@denx.de>
 Active  mips        mips32         incaip      -               incaip              incaip_150MHz                        incaip:CPU_CLOCK_RATE=150000000                                                                                                   Wolfgang Denk <wd@denx.de>
 Active  mips        mips32         vrx200      lantiq          easy80920           easy80920_nandspl                    easy80920:SYS_BOOT_NANDSPL                                                                                                        Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
 Active  mips        mips32         vrx200      lantiq          easy80920           easy80920_nor                        easy80920:SYS_BOOT_NOR                                                                                                            Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
 Active  mips        mips32         vrx200      lantiq          easy80920           easy80920_norspl                     easy80920:SYS_BOOT_NORSPL                                                                                                         Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
 Active  mips        mips32         vrx200      lantiq          easy80920           easy80920_ram                        easy80920:SYS_BOOT_RAM                                                                                                            Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
 Active  mips        mips32         vrx200      lantiq          easy80920           easy80920_sfspl                      easy80920:SYS_BOOT_SFSPL                                                                                                          Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
+Active  mips        mips32         vrx200      zyxel           slx501              slx501_nandspl                        slx501:SYS_BOOT_NANDSPL                                                                                                           Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
+Active  mips        mips32         vrx200      zyxel           slx501              slx501_ram                            slx501:SYS_BOOT_RAM                                                                                                               Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
+Active  mips        mips32         vrx200      zyxel           slx501              slx501_sfspl                          slx501:SYS_BOOT_SFSPL                                                                                                             Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
 Active  mips        mips64         -           -               qemu-mips           qemu_mips64                          qemu-mips64:SYS_BIG_ENDIAN                                                                                                        -
 Active  mips        mips64         -           -               qemu-mips           qemu_mips64el                        qemu-mips64:SYS_LITTLE_ENDIAN                                                                                                     -
 Active  nds32       n1213          ag101       AndesTech       adp-ag101           adp-ag101                            -                                                                                                                                 Andes <uboot@andestech.com>
--- /dev/null
+++ b/include/configs/easy80920.h
+/*
+ * Copyright (C) 2011-2013 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#define CONFIG_IDENT_STRING	" slx501"
+#define CONFIG_BOARD_NAME	"Zyxel slx501 series [420, 424, 425]"
+
+/* Configure SoC */
+#define CONFIG_LTQ_SUPPORT_UART		/* Enable ASC and UART */
+
+#define CONFIG_LTQ_SUPPORT_ETHERNET	/* Enable ethernet */
+#define CONFIG_FW_VRX200_PHY22F_A2X
+#define CONFIG_FW_VRX200_PHY11G_A2X
+
+#define CONFIG_LTQ_SSIO_SHIFT_REGS	1
+#define CONFIG_LTQ_SSIO_EDGE_FALLING
+#define CONFIG_LTQ_SSIO_GPHY1_MODE	0x3
+#define CONFIG_LTQ_SSIO_GPHY2_MODE	0x3
+#define CONFIG_LTQ_SSIO_INIT_VALUE	0x0
+
+#define CONFIG_LTQ_SUPPORT_SPI_FLASH
+#define CONFIG_SPI_FLASH_MACRONIX	/* Supports MX29LV620 serial flash */
+#define CONFIG_SPI_FLASH_SPANSION	/* Supports SF25FL256S serial flash */
+#define CONFIG_SPI_FLASH_EON		/* Supports EN25QH256 serial flash */
+
+#define CONFIG_LTQ_SUPPORT_NAND_FLASH
+#define CONFIG_SYS_NAND_USE_FLASH_BBT
+
+#define CONFIG_LTQ_SUPPORT_SPL_SPI_FLASH	/* Build SPI flash SPL */
+#define CONFIG_SPL_SPI_BUS		0
+#define CONFIG_SPL_SPI_CS		4
+#define CONFIG_SPL_SPI_MAX_HZ		25000000
+#define CONFIG_SPL_SPI_MODE		0
+
+#define CONFIG_LTQ_SUPPORT_SPL_NAND_FLASH	/* Build NAND flash SPL */
+#define CONFIG_LTQ_NAND_CS1
+#define CONFIG_SYS_NAND_PAGE_COUNT	64
+#define CONFIG_SYS_NAND_PAGE_SIZE	2048
+#define CONFIG_SYS_NAND_OOBSIZE		64
+#define CONFIG_SYS_NAND_BLOCK_SIZE	(128 * 1024)
+#define CONFIG_SYS_NAND_5_ADDR_CYCLE
+#define CONFIG_SYS_NAND_ECC_NONE
+
+#define CONFIG_LTQ_SPL_COMP_LZO
+#define CONFIG_LTQ_SPL_CONSOLE
+#define CONFIG_LTQ_SPL_MC_TUNE
+#define CONFIG_MISC_INIT_R
+
+/* MTD devices */
+#define CONFIG_MTD_DEVICE
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_SPI_FLASH_MTD
+#define CONFIG_CMD_MTD
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_CMD_UBI
+#define CONFIG_RBTREE
+
+/* Environment */
+#define CONFIG_ENV_SPI_BUS		CONFIG_SPL_SPI_BUS
+#define CONFIG_ENV_SPI_CS		CONFIG_SPL_SPI_CS
+#define CONFIG_ENV_SPI_MAX_HZ		CONFIG_SPL_SPI_MAX_HZ
+#define CONFIG_ENV_SPI_MODE		CONFIG_SPL_SPI_MODE
+
+#if defined(CONFIG_SYS_BOOT_SFSPL)
+#define CONFIG_SPL_U_BOOT_OFFS		0x7000
+#define CONFIG_SPL_U_BOOT_SIZE		0x44000
+#define CONFIG_SPL_MC_TUNE_OFFS		0x6800
+
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_ENV_OFFSET		(512 * 1024)
+#define CONFIG_ENV_SECT_SIZE		(256 * 1024)
+
+#define MTDIDS_DEFAULT			"nor0=spi0.4"
+#define MTDPARTS_DEFAULT		\
+	"mtdparts=spi0.4:512k(uboot),256k(uboot_env)"
+#elif defined(CONFIG_SYS_BOOT_NANDSPL)
+#define CONFIG_SPL_TPL_OFFS		0x800
+#define CONFIG_SPL_TPL_SIZE		0x5000
+#define CONFIG_SPL_MC_TUNE_OFFS		0x5800
+#define CONFIG_SPL_U_BOOT_OFFS		0x20000
+#define CONFIG_SPL_U_BOOT_SIZE		0x44000
+
+#define CONFIG_ENV_IS_IN_UBI
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_ENV_UBI_PART		"ubi"
+#define CONFIG_ENV_UBI_VOLUME		"uboot_env"
+#define CONFIG_ENV_UBI_VID_HDR_OFF	"2048"
+
+#define MTDIDS_DEFAULT			"nand0=nand-xway"
+#define MTDPARTS_DEFAULT		\
+	"mtdparts=nand-xway:512k(uboot_fix),-(ubi)"
+#else
+#define CONFIG_ENV_IS_NOWHERE
+
+#define MTDIDS_DEFAULT			"nor0=spi0.4"
+#define MTDPARTS_DEFAULT		"mtdparts="
+#endif
+
+#define CONFIG_ENV_SIZE			(8 * 1024)
+
+/* Console */
+#define CONFIG_LTQ_ADVANCED_CONSOLE
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_CONSOLE_ASC		1
+
+/* Commands */
+#define CONFIG_CMD_PING
+#define CONFIG_CMD_MISC
+#define CONFIG_CMD_ECHO
+
+/* Boot */
+#define CONFIG_MIPS_BOOT_FDT
+#define CONFIG_FIT
+#define CONFIG_OF_LIBFDT
+#define CONFIG_LZMA
+#define CONFIG_LZO
+
+/* Environment */
+#define CONFIG_LOADADDR			CONFIG_SYS_LOAD_ADDR
+
+#define CONFIG_ENV_MTDPARTS			\
+	"mtdids="MTDIDS_DEFAULT"\0"		\
+	"mtdparts="MTDPARTS_DEFAULT"\0"
+
+/* Pull in default board configs for Lantiq XWAY VRX200 */
+#include <asm/lantiq/config.h>
+#include <asm/arch/config.h>
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	CONFIG_ENV_LANTIQ_DEFAULTS	\
+	CONFIG_ENV_MTDPARTS
+
+#endif /* __CONFIG_H */
